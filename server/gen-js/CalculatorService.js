//
// Autogenerated by Thrift Compiler (0.14.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

CalculatorService_sum_args = function(args) {
  this.a = null;
  this.b = null;
  if (args) {
    if (args.a !== undefined && args.a !== null) {
      this.a = args.a;
    }
    if (args.b !== undefined && args.b !== null) {
      this.b = args.b;
    }
  }
};
CalculatorService_sum_args.prototype = {};
CalculatorService_sum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.a = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.b = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalculatorService_sum_args.prototype.write = function(output) {
  output.writeStructBegin('CalculatorService_sum_args');
  if (this.a !== null && this.a !== undefined) {
    output.writeFieldBegin('a', Thrift.Type.I32, 1);
    output.writeI32(this.a);
    output.writeFieldEnd();
  }
  if (this.b !== null && this.b !== undefined) {
    output.writeFieldBegin('b', Thrift.Type.I32, 2);
    output.writeI32(this.b);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalculatorService_sum_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CalculatorService_sum_result.prototype = {};
CalculatorService_sum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalculatorService_sum_result.prototype.write = function(output) {
  output.writeStructBegin('CalculatorService_sum_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalculatorService_substract_args = function(args) {
  this.a = null;
  this.b = null;
  if (args) {
    if (args.a !== undefined && args.a !== null) {
      this.a = args.a;
    }
    if (args.b !== undefined && args.b !== null) {
      this.b = args.b;
    }
  }
};
CalculatorService_substract_args.prototype = {};
CalculatorService_substract_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.a = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.b = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalculatorService_substract_args.prototype.write = function(output) {
  output.writeStructBegin('CalculatorService_substract_args');
  if (this.a !== null && this.a !== undefined) {
    output.writeFieldBegin('a', Thrift.Type.I32, 1);
    output.writeI32(this.a);
    output.writeFieldEnd();
  }
  if (this.b !== null && this.b !== undefined) {
    output.writeFieldBegin('b', Thrift.Type.I32, 2);
    output.writeI32(this.b);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalculatorService_substract_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CalculatorService_substract_result.prototype = {};
CalculatorService_substract_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalculatorService_substract_result.prototype.write = function(output) {
  output.writeStructBegin('CalculatorService_substract_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalculatorService_multiply_args = function(args) {
  this.a = null;
  this.b = null;
  if (args) {
    if (args.a !== undefined && args.a !== null) {
      this.a = args.a;
    }
    if (args.b !== undefined && args.b !== null) {
      this.b = args.b;
    }
  }
};
CalculatorService_multiply_args.prototype = {};
CalculatorService_multiply_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.a = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.b = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalculatorService_multiply_args.prototype.write = function(output) {
  output.writeStructBegin('CalculatorService_multiply_args');
  if (this.a !== null && this.a !== undefined) {
    output.writeFieldBegin('a', Thrift.Type.I32, 1);
    output.writeI32(this.a);
    output.writeFieldEnd();
  }
  if (this.b !== null && this.b !== undefined) {
    output.writeFieldBegin('b', Thrift.Type.I32, 2);
    output.writeI32(this.b);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalculatorService_multiply_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CalculatorService_multiply_result.prototype = {};
CalculatorService_multiply_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalculatorService_multiply_result.prototype.write = function(output) {
  output.writeStructBegin('CalculatorService_multiply_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalculatorService_divide_args = function(args) {
  this.a = null;
  this.b = null;
  if (args) {
    if (args.a !== undefined && args.a !== null) {
      this.a = args.a;
    }
    if (args.b !== undefined && args.b !== null) {
      this.b = args.b;
    }
  }
};
CalculatorService_divide_args.prototype = {};
CalculatorService_divide_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.a = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.b = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalculatorService_divide_args.prototype.write = function(output) {
  output.writeStructBegin('CalculatorService_divide_args');
  if (this.a !== null && this.a !== undefined) {
    output.writeFieldBegin('a', Thrift.Type.I32, 1);
    output.writeI32(this.a);
    output.writeFieldEnd();
  }
  if (this.b !== null && this.b !== undefined) {
    output.writeFieldBegin('b', Thrift.Type.I32, 2);
    output.writeI32(this.b);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalculatorService_divide_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CalculatorService_divide_result.prototype = {};
CalculatorService_divide_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.DOUBLE) {
        this.success = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalculatorService_divide_result.prototype.write = function(output) {
  output.writeStructBegin('CalculatorService_divide_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.DOUBLE, 0);
    output.writeDouble(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalculatorServiceClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
CalculatorServiceClient.prototype = {};

CalculatorServiceClient.prototype.sum = function(a, b, callback) {
  this.send_sum(a, b, callback); 
  if (!callback) {
    return this.recv_sum();
  }
};

CalculatorServiceClient.prototype.send_sum = function(a, b, callback) {
  var params = {
    a: a,
    b: b
  };
  var args = new CalculatorService_sum_args(params);
  try {
    this.output.writeMessageBegin('sum', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_sum();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorServiceClient.prototype.recv_sum = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorService_sum_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'sum failed: unknown result';
};

CalculatorServiceClient.prototype.substract = function(a, b, callback) {
  this.send_substract(a, b, callback); 
  if (!callback) {
    return this.recv_substract();
  }
};

CalculatorServiceClient.prototype.send_substract = function(a, b, callback) {
  var params = {
    a: a,
    b: b
  };
  var args = new CalculatorService_substract_args(params);
  try {
    this.output.writeMessageBegin('substract', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_substract();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorServiceClient.prototype.recv_substract = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorService_substract_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'substract failed: unknown result';
};

CalculatorServiceClient.prototype.multiply = function(a, b, callback) {
  this.send_multiply(a, b, callback); 
  if (!callback) {
    return this.recv_multiply();
  }
};

CalculatorServiceClient.prototype.send_multiply = function(a, b, callback) {
  var params = {
    a: a,
    b: b
  };
  var args = new CalculatorService_multiply_args(params);
  try {
    this.output.writeMessageBegin('multiply', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_multiply();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorServiceClient.prototype.recv_multiply = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorService_multiply_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'multiply failed: unknown result';
};

CalculatorServiceClient.prototype.divide = function(a, b, callback) {
  this.send_divide(a, b, callback); 
  if (!callback) {
    return this.recv_divide();
  }
};

CalculatorServiceClient.prototype.send_divide = function(a, b, callback) {
  var params = {
    a: a,
    b: b
  };
  var args = new CalculatorService_divide_args(params);
  try {
    this.output.writeMessageBegin('divide', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_divide();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorServiceClient.prototype.recv_divide = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorService_divide_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'divide failed: unknown result';
};
